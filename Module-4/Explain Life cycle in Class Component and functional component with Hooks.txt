Q1: Explain Life cycle in Class Component and functional component with Hooks?
Ans: Class components have a series of lifecycle methods that you can override to run code at particular times in the component's lifecycle. 
The main lifecycle methods include:

1. constructor(props): This is called when a component is initialized. 
It's used for setting up initial state and binding event handlers.

2. render(): This method is required and it's where the component's UI is defined. 
It returns JSX (or React elements).

3. componentDidMount(): This method is called after the component has been rendered to the screen. 
It's often used to perform network requests or to set up subscriptions.

4. componentDidUpdate(prevProps, prevState): This is called after a component's state or props change.
It's useful for performing actions in response to those changes.

5. componentWillUnmount(): This method is called when a component is being removed from the DOM.
It's used to perform cleanup operations like canceling network requests or cleaning up subscriptions.

Functional Component with Hooks Lifecycle:

1. useState: This Hook allows functional components to manage local component state. 
It returns an array with two elements: the current state value and a function that lets you update it.

2. useEffect: This Hook is used to perform side effects in your components. 
It takes a function that contains the code you want to run, and an optional array of dependencies that determines when the effect should run.

3. useRef: This Hook can create mutable object that persists through the component's entire lifecycle. 
It's commonly used to keep track of DOM elements or values that need to persist between renders.

4. useContext: This Hook allows you to subscribe to React context without introducing nesting.

5. useReducer: This Hook is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one.

6. Custom Hooks: You can create your own Hooks to extract and reuse stateful logic from components.